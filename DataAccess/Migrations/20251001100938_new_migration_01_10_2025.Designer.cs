// <auto-generated />
using System;
using Domain.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(DbIsp422Context))]
    [Migration("20251001100938_new_migration_01_10_2025")]
    partial class new_migration_01_10_2025
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.View1", b =>
                {
                    b.Property<int>("Idконвертации")
                        .HasColumnType("int")
                        .HasColumnName("IDКонвертации");

                    b.Property<int>("Idпользователя")
                        .HasColumnType("int")
                        .HasColumnName("IDПользователя");

                    b.Property<DateOnly>("ДатаКонвертации")
                        .HasColumnType("date");

                    b.ToTable((string)null);

                    b.ToView("View_1", (string)null);
                });

            modelBuilder.Entity("Domain.Models.View4ПорядковыйНомерМинус1", b =>
                {
                    b.Property<int>("Idпользователя")
                        .HasColumnType("int")
                        .HasColumnName("IDПользователя");

                    b.Property<DateOnly>("ДатаКонвертации")
                        .HasColumnType("date");

                    b.Property<long?>("ПорядковыйНомерМинус1")
                        .HasColumnType("bigint");

                    b.ToTable((string)null);

                    b.ToView("View_4_порядковыйНомерМинус1", (string)null);
                });

            modelBuilder.Entity("Domain.Models.ДатыВсехКонвертаций", b =>
                {
                    b.Property<int>("Idпользователя")
                        .HasColumnType("int")
                        .HasColumnName("IDПользователя");

                    b.Property<DateOnly>("ДатаКонвертации")
                        .HasColumnType("date");

                    b.Property<long?>("ПорядковыйНомер")
                        .HasColumnType("bigint");

                    b.ToTable((string)null);

                    b.ToView("ДатыВсехКонвертаций", (string)null);
                });

            modelBuilder.Entity("Domain.Models.ИспользованиеФорматов", b =>
                {
                    b.Property<int>("IdиспользованияФорматов")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDИспользованияФорматов");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdиспользованияФорматов"));

                    b.Property<int>("Idпользователя")
                        .HasColumnType("int")
                        .HasColumnName("IDПользователя");

                    b.Property<int>("Idформата")
                        .HasColumnType("int")
                        .HasColumnName("IDФормата");

                    b.Property<int>("КоличествоИспользований")
                        .HasColumnType("int");

                    b.HasKey("IdиспользованияФорматов")
                        .HasName("PK__Использо__9171285F3195ED75");

                    b.HasIndex("Idпользователя");

                    b.HasIndex("Idформата");

                    b.ToTable("ИспользованиеФорматов", (string)null);
                });

            modelBuilder.Entity("Domain.Models.ИсторияКонвертаций", b =>
                {
                    b.Property<int>("IdисторииКонвертаций")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDИсторииКонвертаций");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdисторииКонвертаций"));

                    b.Property<int>("Idконвертации")
                        .HasColumnType("int")
                        .HasColumnName("IDКонвертации");

                    b.Property<int?>("IdпараметровКонвертации")
                        .HasColumnType("int")
                        .HasColumnName("IDПараметровКонвертации");

                    b.Property<int>("Idпользователя")
                        .HasColumnType("int")
                        .HasColumnName("IDПользователя");

                    b.HasKey("IdисторииКонвертаций")
                        .HasName("PK__ИсторияК__D63642FB00768E2C");

                    b.HasIndex("Idконвертации");

                    b.HasIndex("Idпользователя");

                    b.ToTable("ИсторияКонвертаций", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Конвертации", b =>
                {
                    b.Property<int>("Idконвертации")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDКонвертации");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idконвертации"));

                    b.Property<int>("IdвходногоФайла")
                        .HasColumnType("int")
                        .HasColumnName("IDВходногоФайла");

                    b.Property<int>("IdвыходногоФайла")
                        .HasColumnType("int")
                        .HasColumnName("IDВыходногоФайла");

                    b.Property<long?>("IdпараметровКонвертации")
                        .HasColumnType("bigint")
                        .HasColumnName("IDПараметровКонвертации");

                    b.Property<DateOnly>("ДатаКонвертации")
                        .HasColumnType("date");

                    b.HasKey("Idконвертации")
                        .HasName("PK__Конверта__3ABF9A5D1587A147");

                    b.HasIndex("IdвходногоФайла");

                    b.HasIndex("IdвыходногоФайла");

                    b.ToTable("Конвертации", (string)null);
                });

            modelBuilder.Entity("Domain.Models.НазначениеIdвсемКонвертациям", b =>
                {
                    b.Property<int>("Idконвертации")
                        .HasColumnType("int")
                        .HasColumnName("IDКонвертации");

                    b.Property<int>("Idпользователя")
                        .HasColumnType("int")
                        .HasColumnName("IDПользователя");

                    b.Property<DateOnly>("ДатаКонвертации")
                        .HasColumnType("date");

                    b.ToTable((string)null);

                    b.ToView("НазначениеIDВсемКонвертациям", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Настройки", b =>
                {
                    b.Property<int>("Idнастроек")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDНастроек");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idнастроек"));

                    b.Property<int>("Idпользователя")
                        .HasColumnType("int")
                        .HasColumnName("IDПользователя");

                    b.Property<int>("Уведомления")
                        .HasColumnType("int");

                    b.Property<string>("Язык")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Idнастроек")
                        .HasName("PK__Настройк__11166FF5D815ECC8");

                    b.HasIndex("Idпользователя");

                    b.ToTable("Настройки", (string)null);
                });

            modelBuilder.Entity("Domain.Models.ПараметрКонвертации", b =>
                {
                    b.Property<long>("IdпараметраКонвертации")
                        .HasColumnType("bigint")
                        .HasColumnName("IDПараметраКонвертации");

                    b.Property<string>("Название")
                        .HasMaxLength(16)
                        .HasColumnType("nchar(16)")
                        .IsFixedLength();

                    b.HasKey("IdпараметраКонвертации");

                    b.ToTable("ПараметрКонвертации", (string)null);
                });

            modelBuilder.Entity("Domain.Models.ПараметрыКонвертации", b =>
                {
                    b.Property<long>("IdпараметраКонвертации")
                        .HasColumnType("bigint")
                        .HasColumnName("IDПараметраКонвертации");

                    b.Property<string>("Значение")
                        .HasMaxLength(16)
                        .HasColumnType("nchar(16)")
                        .IsFixedLength();

                    b.HasKey("IdпараметраКонвертации");

                    b.ToTable("ПараметрыКонвертации", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Пользователи", b =>
                {
                    b.Property<int>("Idпользователя")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDПользователя");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idпользователя"));

                    b.Property<int>("Idроли")
                        .HasColumnType("int")
                        .HasColumnName("IDРоли");

                    b.Property<string>("АдресЭлектроннойПочты")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateOnly>("ДатаРегистрации")
                        .HasColumnType("date");

                    b.Property<string>("Логин")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Пароль")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Idпользователя")
                        .HasName("PK__Пользова__B58D26DAE60FCCE0");

                    b.HasIndex("Idроли");

                    b.HasIndex(new[] { "Пароль" }, "UQ__Пользова__130C4ECF13F3C291")
                        .IsUnique();

                    b.HasIndex(new[] { "Логин" }, "UQ__Пользова__BC2217D33F4B4A9A")
                        .IsUnique();

                    b.ToTable("Пользователи", (string)null);
                });

            modelBuilder.Entity("Domain.Models.ПорядковыйНомерМинус1", b =>
                {
                    b.Property<int>("Idпользователя")
                        .HasColumnType("int")
                        .HasColumnName("IDПользователя");

                    b.Property<DateOnly>("ДатаКонвертации")
                        .HasColumnType("date");

                    b.Property<long?>("ПорядковыйНомерМинус11")
                        .HasColumnType("bigint")
                        .HasColumnName("ПорядковыйНомерМинус1");

                    b.ToTable((string)null);

                    b.ToView("ПорядковыйНомерМинус1", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Роли", b =>
                {
                    b.Property<int>("Idроли")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDРоли");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idроли"));

                    b.Property<string>("Название")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.HasKey("Idроли")
                        .HasName("PK__Роли__22FFC98EB699A054");

                    b.HasIndex(new[] { "Название" }, "UQ__Роли__38DA80358CE0501A")
                        .IsUnique();

                    b.ToTable("Роли", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Файлы", b =>
                {
                    b.Property<int>("Idфайла")
                        .HasColumnType("int")
                        .HasColumnName("IDФайла");

                    b.Property<long>("Idформата")
                        .HasColumnType("bigint")
                        .HasColumnName("IDФормата");

                    b.Property<string>("НазваниеФайла")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.HasKey("Idфайла")
                        .HasName("PK__Файлы__DC2A4F00A787B3C7");

                    b.ToTable("Файлы", (string)null);
                });

            modelBuilder.Entity("Domain.Models.ФорматыФайлов", b =>
                {
                    b.Property<int>("Idформата")
                        .HasColumnType("int")
                        .HasColumnName("IDФормата");

                    b.Property<string>("Название")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("Idформата")
                        .HasName("PK__ФорматыФ__479E4A84968FED91");

                    b.HasIndex(new[] { "Название" }, "UQ__ФорматыФ__38DA8035A12B6CC9")
                        .IsUnique();

                    b.ToTable("ФорматыФайлов", (string)null);
                });

            modelBuilder.Entity("Domain.Models.ЧастотаКонвертаций", b =>
                {
                    b.Property<int>("Idпользователя")
                        .HasColumnType("int")
                        .HasColumnName("IDПользователя");

                    b.Property<decimal>("СредняяКонвертация")
                        .HasColumnType("decimal(38, 6)");

                    b.ToTable((string)null);

                    b.ToView("ЧастотаКонвертаций", (string)null);
                });

            modelBuilder.Entity("Domain.Models.ИспользованиеФорматов", b =>
                {
                    b.HasOne("Domain.Models.Пользователи", "IdпользователяNavigation")
                        .WithMany("ИспользованиеФорматовs")
                        .HasForeignKey("Idпользователя")
                        .IsRequired()
                        .HasConstraintName("FK__Использов__IDПол__4E88ABD4");

                    b.HasOne("Domain.Models.ФорматыФайлов", "IdформатаNavigation")
                        .WithMany("ИспользованиеФорматовs")
                        .HasForeignKey("Idформата")
                        .IsRequired()
                        .HasConstraintName("FK__Использов__IDФор__4F7CD00D");

                    b.Navigation("IdпользователяNavigation");

                    b.Navigation("IdформатаNavigation");
                });

            modelBuilder.Entity("Domain.Models.ИсторияКонвертаций", b =>
                {
                    b.HasOne("Domain.Models.Конвертации", "IdконвертацииNavigation")
                        .WithMany("ИсторияКонвертацийs")
                        .HasForeignKey("Idконвертации")
                        .IsRequired()
                        .HasConstraintName("FK__ИсторияКо__IDКон__5070F446");

                    b.HasOne("Domain.Models.Пользователи", "IdпользователяNavigation")
                        .WithMany("ИсторияКонвертацийs")
                        .HasForeignKey("Idпользователя")
                        .IsRequired()
                        .HasConstraintName("FK__ИсторияКо__IDПол__5165187F");

                    b.Navigation("IdконвертацииNavigation");

                    b.Navigation("IdпользователяNavigation");
                });

            modelBuilder.Entity("Domain.Models.Конвертации", b =>
                {
                    b.HasOne("Domain.Models.Файлы", "IdвходногоФайлаNavigation")
                        .WithMany("КонвертацииIdвходногоФайлаNavigations")
                        .HasForeignKey("IdвходногоФайла")
                        .IsRequired()
                        .HasConstraintName("FK__Конвертац__IDВхо__52593CB8");

                    b.HasOne("Domain.Models.Файлы", "IdвыходногоФайлаNavigation")
                        .WithMany("КонвертацииIdвыходногоФайлаNavigations")
                        .HasForeignKey("IdвыходногоФайла")
                        .IsRequired()
                        .HasConstraintName("FK__Конвертац__IDВых__5441852A");

                    b.Navigation("IdвходногоФайлаNavigation");

                    b.Navigation("IdвыходногоФайлаNavigation");
                });

            modelBuilder.Entity("Domain.Models.Настройки", b =>
                {
                    b.HasOne("Domain.Models.Пользователи", "IdпользователяNavigation")
                        .WithMany("Настройкиs")
                        .HasForeignKey("Idпользователя")
                        .IsRequired()
                        .HasConstraintName("FK__Настройки__IDПол__5629CD9C");

                    b.Navigation("IdпользователяNavigation");
                });

            modelBuilder.Entity("Domain.Models.Пользователи", b =>
                {
                    b.HasOne("Domain.Models.Роли", "IdролиNavigation")
                        .WithMany("Пользователиs")
                        .HasForeignKey("Idроли")
                        .IsRequired()
                        .HasConstraintName("FK__Пользоват__IDРол__571DF1D5");

                    b.Navigation("IdролиNavigation");
                });

            modelBuilder.Entity("Domain.Models.Конвертации", b =>
                {
                    b.Navigation("ИсторияКонвертацийs");
                });

            modelBuilder.Entity("Domain.Models.Пользователи", b =>
                {
                    b.Navigation("ИспользованиеФорматовs");

                    b.Navigation("ИсторияКонвертацийs");

                    b.Navigation("Настройкиs");
                });

            modelBuilder.Entity("Domain.Models.Роли", b =>
                {
                    b.Navigation("Пользователиs");
                });

            modelBuilder.Entity("Domain.Models.Файлы", b =>
                {
                    b.Navigation("КонвертацииIdвходногоФайлаNavigations");

                    b.Navigation("КонвертацииIdвыходногоФайлаNavigations");
                });

            modelBuilder.Entity("Domain.Models.ФорматыФайлов", b =>
                {
                    b.Navigation("ИспользованиеФорматовs");
                });
#pragma warning restore 612, 618
        }
    }
}
